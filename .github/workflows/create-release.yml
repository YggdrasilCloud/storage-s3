name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (execute all steps except tag creation)'
        required: false
        type: boolean
        default: false

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start MinIO
        run: |
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            minio/minio server /data

          # Wait for MinIO to be ready
          timeout 30 bash -c 'until docker exec minio mc alias set local http://localhost:9000 minioadmin minioadmin 2>/dev/null; do sleep 1; done'

          # Create test bucket
          docker exec minio mc mb local/test-bucket

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, ctype, iconv, intl
          coverage: xdebug
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run all quality checks
        run: |
          # Lint
          vendor/bin/parallel-lint --colors src tests

          # Code style
          vendor/bin/php-cs-fixer fix --dry-run --diff --verbose

          # Static analysis
          vendor/bin/phpstan analyse --memory-limit=1G

          # Unit tests
          vendor/bin/phpunit --testsuite=Unit --coverage-text

          # Functional tests
          vendor/bin/phpunit --testsuite=Functional --testdox
        env:
          S3_ENDPOINT: http://localhost:9000

      - name: Run Infection mutation testing
        run: |
          vendor/bin/infection \
            --test-framework=phpunit \
            --threads=4 \
            --only-covering-test-cases
        env:
          S3_ENDPOINT: http://localhost:9000

  create-release:
    name: Create Release
    needs: [quality-checks]
    runs-on: ubuntu-latest
    if: ${{ !inputs.dry_run }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Validate version format
        run: |
          VERSION="${{ inputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-beta.1"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Check if tag already exists
        run: |
          if git rev-parse "${{ inputs.version }}" >/dev/null 2>&1; then
            echo "❌ Tag ${{ inputs.version }} already exists!"
            exit 1
          fi
          echo "✅ Tag ${{ inputs.version }} does not exist yet"

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        run: |
          git tag ${{ inputs.version }}
          git push origin ${{ inputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_PAT }}
          tag_name: ${{ inputs.version }}
          generate_release_notes: true
          body: |
            ## YggdrasilCloud S3 Storage Adapter ${{ inputs.version }}

            Amazon S3 storage adapter for YggdrasilCloud Core.

            ### Installation

            ```bash
            composer require yggdrasilcloud/storage-s3:${{ inputs.version }}
            ```

            ### Features

            - ✅ S3Storage adapter with all FileStorageInterface methods
            - ✅ S3-compatible services support (MinIO, DigitalOcean Spaces, etc.)
            - ✅ Presigned URLs with configurable expiration
            - ✅ Optional key prefix for file organization
            - ✅ Symfony auto-discovery via service tagging
            - ✅ Full test coverage (unit + functional + mutation testing)

            ### Requirements

            - PHP 8.4+
            - AWS SDK for PHP 3.x
            - YggdrasilCloud Core

            ### Quality Metrics

            - PHPStan: Level 9
            - Code Coverage: >91%
            - Mutation Score: >90%
            - All tests passing (16 tests, 33 assertions)

            Full changelog: https://github.com/YggdrasilCloud/storage-s3/compare/...v${{ inputs.version }}

  merge-pr:
    name: Merge PR
    needs: [create-release]
    runs-on: ubuntu-latest
    if: ${{ !inputs.dry_run }}
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge PR if exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get current branch name
          BRANCH_NAME=$(git branch --show-current)
          echo "Current branch: $BRANCH_NAME"

          # Find PR for this branch
          PR_NUMBER=$(gh pr list \
            --repo ${{ github.repository }} \
            --state open \
            --json number,headRefName | \
            jq -r ".[] | select(.headRefName == \"${BRANCH_NAME}\") | .number")

          if [ -z "$PR_NUMBER" ]; then
            echo "No open PR found for branch $BRANCH_NAME, skipping merge"
            exit 0
          fi

          echo "Found PR #$PR_NUMBER for branch $BRANCH_NAME, merging with rebase..."

          # Merge PR with rebase strategy
          gh pr merge $PR_NUMBER \
            --repo ${{ github.repository }} \
            --rebase \
            --delete-branch \
            --body "Auto-merged after successful release ${{ inputs.version }}"

          echo "✅ PR #$PR_NUMBER merged successfully"
